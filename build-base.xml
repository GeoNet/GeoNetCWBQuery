<?xml version="1.0" encoding="UTF-8"?>
<!--$Id: build-base.xml 645 2009-07-03 03:00:50Z richardg $-->
<project name="build-base" xmlns:ivy="antlib:org.apache.ivy.ant">
	<description>This build file is intended as an import for full projects. It adds tasks to
		bootstrap ivy and subsequent artifact resolution and publishing, and for clover (Java) code
		coverage analysis and reporting.</description>


	<!-- Load environment variables -->
	<property environment="env"/>

	<!-- Capture the computer name in a cross-platform manner -->
	<property name="env.COMPUTERNAME" value="${env.HOSTNAME}"/>

	<!--Ant properties are immutable, so this only takes effect if it hasn't been set in some previous target.-->
	<property name="ivy.lib.dir" value="lib-ivy"/>

	<property name="ivy.install.version" value="2.1.0-rc1"/>

	<property name="ivy.jar.dir" value="${user.home}/.ant/lib"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

	<target name="with.geonet.enterprise.only" description="Tells ivy to use the enterprise repositories settings only.">
		<property name="geonet.ivy.settings" value="ivysettings-geonet-enterprise-only.xml"/>
	</target>

	<target name="with.geonet.enterprise.populate.fs" description="Tells ivy to use the settings that populate the enterprise mirror repository filesystem.">
		<property name="geonet.ivy.settings" value="ivysettings-geonet-enterprise-populate-fs.xml"/>
	</target>

	<target name="download-ivy" unless="offline">

		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get
			src="http://repo.geonet.org.nz/ivy/repo/manual/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			username="" password="" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
		it into ant's lib dir (note that the latter copy will always take precedence).
		We will not fail as long as local lib dir exists (it may be empty) and
		ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>

		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant"
			classpathref="ivy.lib.path"/>

		<!--Ant properties are immutable, so this only takes effect if it hasn't been set in some previous target.-->
		<property name="geonet.ivy.settings" value="ivysettings.xml"/>
	
		<ivy:settings id="ivy.geonet"
			url="http://repo.geonet.org.nz/ivy/repo/${geonet.ivy.settings}">
			<credentials host="repo.geonet.org.nz" realm="GeoNet" username="" passwd=""/>
		</ivy:settings>

	</target>

	<target name="ivy-resolve" description="retrieve dependencies with ivy" depends="init-ivy">
		<ivy:retrieve settingsRef="ivy.geonet" sync="true"
			pattern="${ivy.lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]"/>

	</target>

	<target name="ivy-clean-cache" depends="init-ivy, ivy-delete-lib" description="Cleans the Ivy cache and removes the lib dir.">
		<ivy:cleancache settingsRef="ivy.geonet"/>
	</target>

	<target name="ivy-delete-lib" description="Removes the lib dir.">
		<delete dir="${ivy.lib.dir}"/>
	</target>

	<target name="-init-macrodef-ivy-compute-classpath">
		<!--Takes an ivy configuration attribute and computes it's relative classpath (of jars), setting a property ivy.{conf}.computed.classpath and ivy.{conf}.path.separator if any jars were found.-->
		<macrodef name="ivy-compute-classpath">
			<attribute name="ivy.conf"/>
			<sequential>
				<pathconvert property="ivy.@{ivy.conf}.computed.classpath" setonempty="false">
					<path>
						<fileset dir="${ivy.lib.dir}/@{ivy.conf}" includes="*.jar" erroronmissingdir="false"/>
					</path>
					<map from="${basedir}${file.separator}" to=""/>
				</pathconvert>
				<condition property="ivy.@{ivy.conf}.path.separator" value=":" else="">
					<isset property="ivy.@{ivy.conf}.computed.classpath"/>
				</condition>
				<condition property="ivy.@{ivy.conf}.computed.classpath" value="">
					<not>
						<isset property="ivy.@{ivy.conf}.computed.classpath"/>
					</not>
				</condition>
			</sequential>
		</macrodef>
	</target>

	<target name="ivy-generate-nbproject-classpaths" depends="-init-macrodef-ivy-compute-classpath"
		description="add dependent jars resolved with ivy to nbproject/project.properties">
		<!-- Compute classpaths for each of our ivy configurations -->
		<ivy-compute-classpath ivy.conf="compile"/>
		<ivy-compute-classpath ivy.conf="foride"/>
		<ivy-compute-classpath ivy.conf="javadoc"/>
		<ivy-compute-classpath ivy.conf="test"/>
		<ivy-compute-classpath ivy.conf="optional"/>
		<ivy-compute-classpath ivy.conf="runtime"/>

		<propertyfile file="nbproject/project.properties">
			<!-- Default netbeans javac.classpath is (nothing!) just ivy's compile configuration -->
			<entry operation="=" type="string" key="javac.classpath"
				value="${ivy.compile.computed.classpath}"/>
			<!-- Plus some sources and/javadocs (if specified) for added power in the IDE -->
			<entry operation="+" type="string" key="javac.classpath"
				value="${ivy.foride.path.separator}${ivy.foride.computed.classpath}"/>
			<entry operation="+" type="string" key="javac.classpath"
				value="${ivy.javadoc.path.separator}${ivy.javadoc.computed.classpath}"/>

			<!-- Default netbeans run.classpath is ${build.classes.dir} -->
			<entry operation="=" type="string" key="run.classpath"
				value="$${build.classes.dir}"/>
			<!-- Plus some runtime (includes compile) and optional dependencies -->
			<entry operation="+" type="string" key="run.classpath"
				value="${ivy.runtime.path.separator}${ivy.runtime.computed.classpath}"/>
			<entry operation="+" type="string" key="run.classpath"
				value="${ivy.optional.path.separator}${ivy.optional.computed.classpath}"/>

			<!-- Default netbeans javac.test.classpath is ${build.classes.dir} -->
			<entry operation="=" type="string" key="javac.test.classpath"
				value="$${build.classes.dir}"/>
			<!-- Plus test (including runtime) dependencies (this will almost always include junit and clover etc.) -->
			<entry operation="+" type="string" key="javac.test.classpath"
				value="${ivy.test.path.separator}${ivy.test.computed.classpath}"/>

			<!-- Default netbeans run.test.classpath is ${build.classes.dir}:${build.test.classes.dir} -->
			<entry operation="=" key="run.test.classpath"
				value="$${build.classes.dir}:$${build.test.classes.dir}"/>
			<!-- Plus test (including runtime) and optional dependencies. -->
			<entry operation="+" type="string" key="run.test.classpath"
				value="${ivy.test.path.separator}${ivy.test.computed.classpath}"/>
			<entry operation="+" type="string" key="run.test.classpath"
				value="${ivy.optional.path.separator}${ivy.optional.computed.classpath}"/>
		</propertyfile>
	</target>

	<target name="ivy-rename-netbeans-dist-files" depends="init,init-ivy" description="Copies the netbeans named jar to the ivy module name">
		<ivy:info settingsRef="ivy.geonet"/>
		<copy todir="${dist.dir}" preservelastmodified="true">
			<fileset dir="${dist.dir}">
				<include name="${ant.project.name}*"/>
			</fileset>
			<globmapper from="${ant.project.name}*" to="${ivy.module}*"/>
		</copy>
	</target>

	<target name="ivy-publish-local-release" depends="clean,ivy-update-manifest,jar,jar-sources,jar-javadoc,ivy-rename-netbeans-dist-files,init-ivy" description="Publishes a new release version of the project artifact(s) to the local (disk) repository.">

		<ivy:info settingsRef="ivy.geonet"/>

		<property name="ivy.publish.local.pattern" value="${dist.dir}/[artifact](-[classifier]).[ext]"/>

		<ivy:buildnumber settingsRef="ivy.geonet"
			resolver="geonet-enterprise-publish-http"
			organisation="${ivy.organisation}"
			module="${ivy.module}"
                        revision="${ivy.revision}"
			default="1.0.0" defaultBuildNumber="1" revSep="."/>

<!-- note use either revision=working or ivy:retrieve work around or cf http://issues.apache.org/jira/browse/IVY-964 -->
               
                <ivy:retrieve settingsRef="ivy.geonet"/> 

		<ivy:publish settingsRef="ivy.geonet"
			artifactspattern="${ivy.publish.local.pattern}"
			resolver="local"
			pubrevision="${ivy.new.revision}"
			status="release"
			/>

<!--		<ivy:publish settingsRef="ivy.geonet"
			artifactspattern="${ivy.publish.local.pattern}"
			resolver="local"
                        revision="working"
			pubrevision="${ivy.new.revision}"
			status="release"
			/> -->

	</target>

	<target name="ivy-publish-local-snapshot" depends="jar,ivy-update-manifest,jar-sources,jar-javadoc,ivy-rename-netbeans-dist-files,init-ivy" description="Publishes a new snapshot version of the project artifact(s) to the local (disk) repository.">

		<ivy:info settingsRef="ivy.geonet"/>
		
		<property name="ivy.publish.local.pattern" value="${dist.dir}/[artifact](-[classifier]).[ext]"/>
		
		<ivy:buildnumber settingsRef="ivy.geonet"
			resolver="geonet-enterprise-publish-http"
			organisation="${ivy.organisation}"
			module="${ivy.module}"
			revision="${ivy.revision}"
			default="0.0.1" defaultBuildNumber="1" revSep="."/>

		<ivy:publish settingsRef="ivy.geonet"
			artifactspattern="${ivy.publish.local.pattern}"
			resolver="local"
			pubrevision="${ivy.new.revision}-SNAPSHOT"
			status="integration"
			update="true"
			overwrite="true"
			/>

	</target>

	<target name="ivy-update-manifest" depends="init,init-ivy"
		description="updates the manifest.mf file with package versioning information">
		<ivy:info settingsRef="ivy.geonet" />

		<ivy:buildnumber settingsRef="ivy.geonet"
			resolver="geonet-enterprise-publish-http"
			organisation="${ivy.organisation}"
			module="${ivy.module}"
			revision="${ivy.revision}"
			default="0.0.1" defaultBuildNumber="1" revSep="."/>

		<!-- Set the default timestamp variables TODAY, DSTAMP and TSTAMP -->
		<tstamp/>

		<manifest file="${manifest.file}" mode="update">
			<attribute name="Built-By" value="${user.name}@${env.COMPUTERNAME}"/>
			<!--This might be better done using the jarlib-manifest task-->
			<section name="${ivy.organisation}">
				<attribute name="Specification-Title" value="${application.title}"/>
				<attribute name="Specification-Version" value="${ivy.revision}"/>
				<attribute name="Specification-Vendor" value="${application.vendor}"/>
				<attribute name="Implementation-Title" value="${ivy.organisation}.${ivy.module}"/>
				<attribute name="Implementation-Version" value="${ivy.new.revision}-${DSTAMP}${TSTAMP}"/>
				<attribute name="Implementation-Vendor" value="${ivy.organisation}"/>
			</section>
		</manifest>
	</target>


	<property name="clover.report.dir" value="clover-reports"/>

	<target name="with.clover" depends="clover.init"
		description="enables clover e.g., 'ant with.clover test'.  It may be necessary to clean all the tests first with 'ant clean'">

		<property name="clover.enabled" value="true"/>
	</target>

	<target name="with.optimized.testset" depends="with.clover"
		description="enables clover testset optimization e.g., 'ant with.optimized.testset test'.  It may be necessary to clean all the tests first with 'ant clean'">

		<property name="clover.enable.optimization" value="true"/>
	</target>

	<target name="clover.init"
		description="initialises clover, but doesn't necessarily enable it. Use 'ant with.clover ...' to enable clover.">
		<path id="clover.classpath">
			<fileset dir="${ivy.lib.dir}">
				<include name="**/clover*.jar"/>
			</fileset>
		</path>
		<taskdef resource="cloverlib.xml" classpathref="clover.classpath"/>
		<taskdef resource="cloverjunitlib.xml" classpathref="clover.classpath"/>

		<!--This could potentially be an inline ivy retrieve (from our enterprise repo)-->
		<!--that depends on a specific version of clover-->
		<get
			src="http://repo.geonet.org.nz/ivy/clover/license/clover.license"
			username="" password="" dest="${ivy.lib.dir}/optional/clover.license" usetimestamp="true"/>

		<clover-setup enabled="${clover.enabled}"/>
	</target>

	<target name="clover.html" depends="clover.init"
		description="generates a clover code coverage report in html e.g., 'ant clover.html'">
		<clover-html-report outdir="${clover.report.dir}/html" title="${ant.project.name}"/>
	</target>

        <target name="clover.current.xml">
          <mkdir dir="${clover.report.dir}/pdf"/>
         <clover-report>
          <current outfile="${clover.report.dir}/current.xml"/>
        </clover-report>
        </target>

	<target name="clover.pdf" depends="clover.init"
		description="generates a clover code coverage pdf report e.g., 'ant clover.pdf'">
		<mkdir dir="${clover.report.dir}/pdf"/>
		<clover-pdf-report
			outfile="${clover.report.dir}/pdf/${ant.project.name}-clover-coverage.pdf"/>
	</target>

	<target name="clover.clean" depends="clover.init"
		description="cleans the clover cache files">
		<clover-clean/>
		<delete dir="${clover.report.dir}"/>
	</target>

	<target name="clover.snapshot" depends="clover.init"
		description="generates a snapshot db for future test optimization.">
		<clover-snapshot/>
	</target>

	<target name="-init-macrodef-clover-optimized-junit" depends="clover.init">
		<macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
			<attribute default="${includes}" name="includes"/>
			<attribute default="${excludes}" name="excludes"/>
			<attribute default="**" name="testincludes"/>
			<sequential>
				<junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true">
					<batchtest todir="${build.test.results.dir}" fork="true">
						<clover-optimized-testset enabled="${clover.enable.optimization}">
							<fileset dir="${test.test.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
								<filename name="@{testincludes}"/>
							</fileset>
						</clover-optimized-testset>
					</batchtest>
					<classpath>
						<path path="${run.test.classpath}"/>
					</classpath>
					<syspropertyset>
						<propertyref prefix="test-sys-prop."/>
						<mapper from="test-sys-prop.*" to="*" type="glob"/>
					</syspropertyset>
					<formatter type="brief" usefile="false"/>
					<formatter type="xml"/>
					<jvmarg line="${run.jvmargs}"/>
				</junit>
			</sequential>
		</macrodef>
	</target>

	<target name="jar-sources" depends="init,-pre-jar,-pre-pre-jar"
		description="Creates a source jar for publication alongside implementation">
		<!--Needs to use src.*dir-->
		<jar destfile="${dist.dir}/${ant.project.name}-sources.jar"
			basedir="${src.dir}" compress="${jar.compress}"
			manifest="${manifest.file}"/>

	</target>

	<target name="jar-javadoc" depends="init,-pre-jar,-pre-pre-jar,javadoc"
		description="Creates a javadoc jar for publication alongside implementation">
		<jar destfile="${dist.dir}/${ant.project.name}-javadoc.jar"
			basedir="${dist.javadoc.dir}" compress="${jar.compress}"
			manifest="${manifest.file}"/>
		
	</target>

</project>
